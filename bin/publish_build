#!/usr/bin/env bash

echo -e "CURRENT_BRANCH: ${TRAVIS_BRANCH}\n"
echo -e "PULL_REQUEST: ${TRAVIS_PULL_REQUEST}\n"

# build the distribution files first
$(npm bin)/grunt build

git config --global user.email "antonio@brandwatch.com"
git config --global user.name "Antonio D'Ettole"

# This specifies the repository we are going to work with.
DIST_REPO_SLUG="BrandwatchLtd/selleckt-builds"

# This specifies the user who is associated to the GH_TOKEN
USER="codazzo"

# This ensure that no directories within dist will be copied when script is run.
INCLUDED_FILES=`find dist -maxdepth 1 -type f`

# The branch the builds are pushed ot
RELEASE_BRANCH="master"

LATEST_TAG=`git describe --tags`
LATEST_COMMIT_TAG=`git describe --tags --abbrev=0`

echo -e "DIST_REPO_SLUG: ${DIST_REPO_SLUG}\n"
echo -e "INCLUDED_FILES: ${INCLUDED_FILES}\n"
echo -e "CURRENT_BRANCH: ${TRAVIS_BRANCH}\n"

if [[ $TRAVIS_PULL_REQUEST != "false" ]]; then
  echo "not publishing because this is a pull request."
  exit 0
fi

if [[ -z $GH_TOKEN ]]; then
  echo "secure environment variables not detected."
  echo "not a repo owner, exiting."
  exit 0
fi

# sending output to /dev/null to prevent GH_TOKEN leak on error
git clone https://${USER}:${GH_TOKEN}@github.com/${DIST_REPO_SLUG}.git bower_selleckt &> /dev/null
cp -r ${INCLUDED_FILES} bower_selleckt/

cd bower_selleckt
git remote rm origin

# sending output to /dev/null to prevent GH_TOKEN leak on error
git remote add origin https://${USER}:${GH_TOKEN}@github.com/${DIST_REPO_SLUG}.git &> /dev/null
git add -A
git commit -m "Selleckt Bower Auto build for https://github.com/BrandwatchLtd/selleckt/commits/${TRAVIS_COMMIT}."

if [ $LATEST_TAG == $LATEST_COMMIT_TAG ]; then
    # latest release has a new tag: create a new tag on the distribution repo as well
    echo -e "CREATING TAG: ${LATEST_TAG}\n"
    git tag $LATEST_TAG
fi

# sending output to /dev/null to prevent GH_TOKEN leak on error
git push --tags -f origin ${RELEASE_BRANCH} &> /dev/null
echo -e "Done\n"
